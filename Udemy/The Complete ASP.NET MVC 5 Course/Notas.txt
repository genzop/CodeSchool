Code First
- Incluir EntityFramework en el proyecto
- Crear un DbContext
- Activar las migraciones con el comando 'enable-migrations'
- Ir agregando los cambios con nuevas migraciones con el comando 'add-migration'
- Actualizar la base de datos con el comando 'update-database'
    
- La tabla _Migration_History guarda un historial de todos los cambios efectuados.
- Hacer muchas migraciones pequeñas

- Agregar registros a la base de datos:
    - Agregar una migracion vacia
    - En el metodo Up de esa migracion:
        - Ejecutar un comando SQL como el siguiente ejemplo
            'Sql("INSERT INTO MembershipTypes (Id, SignUpFee, DurationInMonths, DiscountRate) VALUES (1, 0, 0, 0)")'

- Agregar restricciones al modelo
    - Utilizando la libreria System.ComponentModel.DataAnnotations se agregan metaetiquetas a las propiedades.

Eager Loading
- Carga los registros y sus asociaciones, esto se logra con el comando:
    '_context.Customers.Include(c => c.MembershipType).ToList()'

label for: El atributo for en un label permite que cuando se clickee en el label, se focusea el control correspondiente.
[Display(Name = "Date of Birth")] = Cambia el contenido del label que se muestra junto al control.

Validaciones
- .Net utiliza las DataAnnotations para validar el modelo tanto del lado del server como del cliente.
- Para habilitar las validaciones del lado del cliente hay que ingresar las siguientes lineas debajo del formulario.
    @section scripts
    {
        @Scripts.Render("~/bundles/jqueryval")
    }
- Las validaciones personalizadas no pueden ser validadas del lado del cliente.
- Agregar AntiForgeryToken para aumentar la seguridad de la aplicación y prevenir CSFR o Cross-site Request AntiForgeryToken

AutoMapper
- Instalar AutoMapper ingresando el siguiente comando en la Package Manager Console
    'install-package automapper -version:4.1'
- Crear una clase en la carpeta App_Start con el nombre MappingProfile
    - Esta clase hereda de Profile que se encuentra en el namespace de AutoMapper
    - Dentro de su constructor vacio se mapean las clases de la siguiente manera:
        'Mapper.CreateMap<Customer, CustomerDto>()'
        'Mapper.CreateMap<CustomerDto, Customer>()'
- Se inicializa AutoMapper ingresando la siguiente linea en el metodo Application_Start del archivo Global.asax.cs
    'Mapper.Initialize(c => c.AddProfile<MappingProfile>())'

Configurar respuesta
- Para especificar que la Api debe devolver la información en formato JSON con camelCase, se deben agregar estas líneas en el archivo WebApiConfig.cs
    var settings = config.Formatters.JsonFormatter.SerializerSettings;
    settings.ContractResolver = new CamelCasePropertyNamesContractResolver();
    settings.Formatting = Formatting.Indented;
