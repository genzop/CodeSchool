Code First
- Incluir EntityFramework en el proyecto
- Crear un DbContext
- Activar las migraciones con el comando 'enable-migrations'
- Ir agregando los cambios con nuevas migraciones con el comando 'add-migration'
- Actualizar la base de datos con el comando 'update-database'
    
- La tabla _Migration_History guarda un historial de todos los cambios efectuados.
- Hacer muchas migraciones pequeñas

- Agregar registros a la base de datos:
    - Agregar una migracion vacia
    - En el metodo Up de esa migracion:
        - Ejecutar un comando SQL como el siguiente ejemplo
            'Sql("INSERT INTO MembershipTypes (Id, SignUpFee, DurationInMonths, DiscountRate) VALUES (1, 0, 0, 0)")'

- Agregar restricciones al modelo
    - Utilizando la libreria System.ComponentModel.DataAnnotations se agregan metaetiquetas a las propiedades.

Eager Loading
- Carga los registros y sus asociaciones, esto se logra con el comando:
    '_context.Customers.Include(c => c.MembershipType).ToList()'

label for: El atributo for en un label permite que cuando se clickee en el label, se focusea el control correspondiente.
[Display(Name = "Date of Birth")] = Cambia el contenido del label que se muestra junto al control.

Validaciones
- .Net utiliza las DataAnnotations para validar el modelo tanto del lado del server como del cliente.
- Para habilitar las validaciones del lado del cliente hay que ingresar las siguientes lineas debajo del formulario.
    @section scripts
    {
        @Scripts.Render("~/bundles/jqueryval")
    }
- Las validaciones personalizadas no pueden ser validadas del lado del cliente.
- Agregar AntiForgeryToken para aumentar la seguridad de la aplicación y prevenir CSFR o Cross-site Request AntiForgeryToken

AutoMapper
- Instalar AutoMapper ingresando el siguiente comando en la Package Manager Console
    'install-package automapper -version:4.1'
- Crear una clase en la carpeta App_Start con el nombre MappingProfile
    - Esta clase hereda de Profile que se encuentra en el namespace de AutoMapper
    - Dentro de su constructor vacio se mapean las clases de la siguiente manera:
        'Mapper.CreateMap<Customer, CustomerDto>()'
        'Mapper.CreateMap<CustomerDto, Customer>()'
- Se inicializa AutoMapper ingresando la siguiente linea en el metodo Application_Start del archivo Global.asax.cs
    'Mapper.Initialize(c => c.AddProfile<MappingProfile>())'

Configurar respuesta
- Para especificar que la Api debe devolver la información en formato JSON con camelCase, se deben agregar estas líneas en el archivo WebApiConfig.cs
    var settings = config.Formatters.JsonFormatter.SerializerSettings;
    settings.ContractResolver = new CamelCasePropertyNamesContractResolver();
    settings.Formatting = Formatting.Indented;

Bootbox
Es una libreria de javascript que habilita herramientas graficas de forma mas simple y directa que bootstrap.

Optimizacion
- Preferir eager loading a lazy loading

Glipmse
- Herramienta que ayuda con la optimización de código.
- Instalacion
    'install-package glimpse.mvc5' & 'install-package glimpse.ef6'

OutputCache
Al utilizar esta meta-etiqueta, una vez que se renderice el html, va a ser guardado en cache. Se puede guardar en cache un action o incluso
todo un controller. Para ello se debe colocar la meta-etiqueta correspondiente.
    [OutputCache(Duration = 50, Location = OutputCacheLocation.Server, VaryByParam = "genre")]'
        - Duration: tiempo en que la vista será guardada en cache
        - OutputCacheLocation: lugar donde será guardada la vista
        - VaryByParam: crear una nueva version en cache si esta este parametro

    [OutputCache(Duration = 0, VaryByParam = "*", NoStore = true)] = deshabilita completamente el output cache.

DataCache
Se utilza para guardar datos en cache, similares a las sesiones. Se guarda la información en utilizando una key y cuando se quiera cargar,
se debe castear a su tipo original.
    Guardar datos en cache:
        if(MemoryCache.Default["Genres"] == null)
        {
            MemoryCache.Default["Genres"] = _context.Genres.ToList();
        }
    Leer datos en cache:
        var genres = MemoryCache.Default["Genres"] as IEnumerable<Genre>;

Async
No mejora la performace de la aplicacion pero si la escabilidad.

Sessiones
Evitar el uso de sesiones, perjudican la escabilidad del proyecto.
    - Para deshabilitar las sesiones, se debe agregar la siguiente linea en la sección <system.web> del web.Configurar
        '<sessionState mode="Off"></sessionState>'

Autocompletacion de controles
Para la autocompletacion de los controles podemos utilizar Twitter.Typeahead, que se installa con la siguiente linea   
    'install-package Twitter.Typeahead'
Una vez incorporada la libreia al proyecto, debemos copiar las clases css de la pagina de ejemplo e incorporarlas manualmente a nuestro proyecto.
El ejemplo remote hace referencia a una fuente de datos remota como una API.

Notificaciones Toast
Para poder utilizar notificaciones Toaster, hay que instalar Toastr
    'install-package toastr'

Validaciones JQuery 
    - Trabajan con el name del control.
    - Se pueden crear validaciones personalizadas de la siguiente forma:
        '$.validator.addMethod("nombre", function () { 
                return condicionVerdadera;
            }, "MensajeDeError");'
    - Y luego implementarse con el siguiente atributo en el controle:
        'data-rule-nombreValidacion="true"'
    
    - Para validar un formulario se hace lo siguiente:
        $("#newRental").validate({                                                      //Activa las validaciones JQuery en ese formulario
            submitHandler: function () {                                                //Incluye un handler para cuando se hace submit
                $.ajax({                                                                //Llamada AJAX para hacer POST con el formulario
                    url: "/api/Rentals",
                    method: "POST",
                    data: vm
                })
                .done(function () {                                                     //Funcion que sucede cuando la llamada AJAX fue exitosa
                    toastr.success("Rentals succefully recorded");                      
                })
                .fail(function () {
                    toastr.error("Something unexpected happened");                      //Funcion que sucede cuando la llamada AJAX falla
                });
                return false;                                                           //Prevee que la página haga un postback, mismo funcionamiento que 'e.preventDefault()'
            }
        });




