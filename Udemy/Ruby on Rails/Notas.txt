Section 2 - The Ruby Programming Language
    Todo en ruby devuelve algo, por lo que funciones que no devuelvan nada devolver nil que es como "null"

    Comentarios
        Toda linea que comience con # es un comentario

    Invertir orden de array
        .reverse!

    Imprimir texto sin devolver nada    
        puts "Texto"
    Imprimir texto y devolver su contenido
        p "Texto"
    Imprimir texto sin hacer un salto de linea al final
        print "Texto"
        
    Ejecutar el codigo de un archivo de Ruby
        ruby "archivoRuby.rb"
        
    Declarar variable
        greeting = "Hello World!"

    Declarar un metodo
        def nombreMetodo(parametros)
            # Hacer cosas
        end

    Consola interactiva
        Se puede utilizar una consola interactiva que permite ejecutar codigo en tiempo real. El comando irb arranca esta consola interactiva y exit la cierra.

    Strings
        Definicion
            Se definen utilizado comillas dobles "" y simples ''. 
                nombre "Enzo"
                apellido 'Panettieri'

        Concatenacion
            Se pueden concatenar dos strings con el simbolo +
                puts nombre + apellido

        Interpolacion
            Permite inyectar variables dentro de un string. Solo se puede realizar con variables con comillas dobles.
                "My first name is #{nombre} and my last name is #{apellido}"

    Tipo de dato
        Al ejecutar el comando .class luego de un valor o una variable ruby muestra el tipo de dato de esa variable

    Metodos disponibles
        Para ver todos los metodos disponibles para una variable o valor se utiliza el sufijo .methods
        
    Encadenar metodos   
        10.to_s.class
    
    Leer datos ingresados por el usuario
        Para capturar datos ingresados por el usuario se usa el comando gets.chomp

    Numeros

        Multiplicar strings
            Es posible multiplicar strings por numeros para imprimir varias veces una cadena
                puts "-" * 20
            El metodo .times nos permite realizar lo mismo pero con mayor flexibilidad
                20.times { print "-" }
        
    Metodos
        En los metodos la ultima linea tiene el return implicito, pero tambien te puede utilizar la palabra return

    Condicionales
        if 
        elsif 
        else
        end

        Si tienen una sola instruccion se pueden hacer todo en una sola linea
            instruccion if condicion

    Arrays
        Crear array en base a un rango
            x = 1..100.to_a

        Mezclar elementos de un array
            (1..100).to_a.shuffle

        Pisar el objeto original
            Se utiliza el simbolo ! despues de la expresion para la expresion mute al objeto
                x = (1..100).to_a
                x.reverse!

        Agregar elemento al final del array
            a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
            a << 10
            a.append(11)
            a.push(12)

        Agregar elemento al comienzo del array
            a.unshift(-1)

        Eliminar elementos repetidos de un array    
            a.uniq!

        Revisar si array esta vacio
            a.empty?
        
        Revisar si array contiene a elemento
            a.include?(1)

        Extrer el ultimo elemento de un array
            x = a.pop

        Unir todos los elementos de un array en un string
            a.join  
            b = a.join("-")

        Separar un string en un array   
            a = b.split("-")
            c = %w(Mi nombre es Enzo y esto es genial Ruby es increible)
        
        Repetir ultima expresion
            d = _

    Iteradores
        For
            for i in a
                print i
            end

        Each
            Una instruccion
                a.each {|item| print item + " "} 
                
            Multiples instrucciones
                a.each do |item|
                    print item + " "
                end

        Select
            Devuelve los elementos que cumplan con la condicion especificada. En el ejemplo se va a guardar en a todos los numeros impares del array z
                z = (1..100).to_a.shuffle
                a = z.select {|item| number.odd?}
    Hash (Dictionaries)
        Es una lista de parejas clave-valor
            hash_ejemplo = { 'a' => 1, 'b' => 2, 'c' => 3  }
            p hash_ejemplo['b'] 
        
        La clave tambien puede tratarse como una propiedad llamada symbol  
            hash_simbolos = { a: 1, b: 2, c: 3 }
            p hash_simbolos[:a] 

        Obtener claves o valores
            hash_ejemplo.keys   
            hash_ejemplo.values

        Iterar un hash
            hash_ejemplo.each { |key, value| puts "The key is #{key} and the value is #{value}" }

            hash_ejemplo.each do |key, value|
                puts "The class for the key is #{key.class} and the value is #{value.class}"
            end        

        Agregar elemento o modificar un elemento
            hash_ejemplo['d'] = 4

        Filtrar elementos
            hash_ejemplo.select { |k, v| v.is_a?(String) }

        Eliminar elementos
            Para eliminar un elemento solo hace falta eliminar la clave
            hash_ejemplo.each { |k, v| hash_ejemplo.delete(k) if v.is_a?(String) }

    Estilos
        Indentacion
            En Ruby se utilizan dos espacios de indentacion

        Snake Case: todo en minuscula separado por guiones bajos. Se utilizan en variables, metodos y en los archivos
            this_is_a_variable = 1
            def this_is_a_method
            end
            file_number_one.rb

        Camel Case: todo junto con palabras comenzadas con mayusculas. Se utiliza en las clases
            class ClaseImportante
            end

        Mas informacion: https://github.com/rubocop-hq/ruby-style-guide
    Clases
        Las propiedades de una clase deben comenzar con un @
            class Student
                @first_name
                @last_name
            end

        Para poder acceder a las propiedades de un objeto es necesario utilizar las siguientes propiedades
            class Student
                # Permite obtener y setear la propiedad
                attr_accessor :first_name, :last_name, :email

                # Permite obtener la propiedad
                attr_reader :username
                
                @first_name
                @last_name
                @email
                @username
                @password

                # Constructor que permite setear las propiedades en el momento de inicializacion
                def initialize(firstname, lastname, username, email, password)
                    @first_name = firstname
                    @last_name = lastname
                    @email = email
                    @username = username
                    @password = password
                end

                # Sobreescribe el metodo to_s que se llama cuando se quiere imprimir el objeto
                def to_s
                    "First name: #{@first_name}, Last name: #{@last_name}, Username: #{@username}, Email: #{@email}"
                end
            end
    Modulos
        Exportar modulo
            Encapsular metodos dentro de una clase en un Modulo. 
                module Encrypt
                    def Method1
                    end
                end
            Estos metodos se pueden volver estaticos insertandoles el prefijo .self en el nombre
                module Encrypt
                    def self.Method1
                    end
                end
        Importar modulo
            Si esta en el mismo directorio
                require_relative 'Encrypt'
                Encrypt.Method1

Section 3 - Introduction to Ruby on Rails
    Rails
        Crear un projecto
            rails new nombre_projecto

        Arracar server
            En la carpeta del proyecto utilizar uno de los siguientes comandos
                rails server
                rails s

        Instalar gems faltantes
            bundler install

        Estructura projecto
            /app/                   => Aplicacion
            /app/assets/            => Recursos estaticos (js, css, images)
            /app/controllers/       => Controladores
            /app/helpers/           => Logica comun utilizada en las vistas
            /app/mailers/           => Configuracion de envio de emails
            /app/models/            => Modelos
            /app/views/             => Vistas
            /config/environment/    => Configuraciones de los diferentes entornos
            /config/database.yml    => Configuracion de la base de datos
            /config/routes.rb       => Configuracion de las rutas
            /db/                    => Migraciones a la base de datos
            /log/                   => Logs del servidor
            /public/                => Contenido publico que puede accederse directamente
            /test/                  => Pruebas automaticas
            /Gemfile                => Lista de gems que tenemos instaladas
            /Gemfile.lock           => Lista de dependencias de cada gems       

        Ver rutas configuradas
            rails routes

        Configurar una ruta
            # MetodoHTTP 'Ruta', to: 'controller#action'
                get 'welcome/home', to: 'welcome#home'
            La ruta base de la aplicacion se configura utilizando el verbo 'root'
                root 'pages#home'

        Controller con action
            Un controller es una clase que extiende de 'ApplicationController' y que dentro tiene definidos los actions.
            Por cada controller debe haber una carpeta con el mismo nombre dentro de la carpeta views. y que dentro contendra un archivo .html.erb por cada action

            class WelcomeController < ApplicationController
                def home  
                end
            end
        
        Hypervinculo
            Para declarar un hipervinculo a otra accion de un controller se utiliza la siguiente Estructura.          
                <%= link_to 'Text', path %>
            El path se obtiene al utilizar el comando rails routes

        Generar scaffold de una entidad
            En Rails es posible generar todo el ABM de una entidad utilizando un comando
                rails g scaffold Clase propiedad1:tipo1 propiedad2:tipo2

        Correr migraciones pendientes
            rails db:migrate

    Heroku
        Para deployar un projecto de Rails en Heroku es necesario:
            1° Instalar el Heroku Toolbelt
            2° Ingresar nuestras credenciales con el siguiente comando
                heroku login
            3° Crear el proyecto
                heroku create
            4° Agregar nuestra clave ssh de git
                heroku keys:add
            5° Deployar en Heroku
                git push heroku master
            6° Cambiar nombre de aplicacion
                heroku rename nombre

Section 4 - CRUD Operations in Ruby on Rails
    Convenciones de nombres para tablas
        Modelo: singular, primera letra mayuscula, 
        Tabla: plural, minuscula
        Controllador: plural _controller

    Migraciones
        Crea una migracion para crear tabla sin propiedades
            rails g migration create_tabla
        
            Agregar propiedad
                Cuando se agrega una propiedad se utiliza la siguiente estructura
                  def change
                    create_table :articles do |t|
                      # t.Tipo :nombre    
                      t.string :title
                    end
                  end

        Crear migracion para agregar propiedades a tabla
            rails g migration agregar_propiedad_a_tabla

            Modificar tabla
              def change
                # Comando tabla, propiedad, tipo
                add-column :articles, :description, :text
              end

        Ejecutar migraciones
            rails db:migrate    

        Revertir migraciones 
            rails db:rollback

        Toda tabla debe tener timestamps de creacion y actualizacion, puede ser agregadas en la creacion de la tabla o despues
            add-column :articles, :created_at, :datetime
            add-column :articles, :updated_at, :datetime

        Consola de Rails
            Da acceso directo a la base de datos. Se debe reiniciar si se realizo algun cambio en el modelo
                rails console
            
                Modelo  ->  lista todas las columnas de esa tabla
                Modelo.all  ->  lista todos los registros de esa tabla
                objeto = Modelo.find(id)  ->  Busca un registro en base al id
              
                objeto = Modelo.new  ->  crea un nuevo objeto de ese modelo
                objeto.propiedad = valor  ->  asigna un valor a una propiedad de ese objeto
                objeto = Modelo.new (propiedad: valor, propiedad: valor)  ->  crea un objeto con las propiedades en una sola linea                
                Modelo.create(propiedad: valor, propiedad: valor)  ->  crea un registro directamente en la base de datos

                article.destroy  -> elimina el registro de la base de datos

                objeto.save  ->  guarda ese objeto en la base de datos

                objeto.errors.any?  ->  revisa que se cumplan todas las validaciones del modelo
                objeto.errors.full_messages  ->  obtiene todos los mensajes de error

        Validar modelo
            Propiedad requerida
                validates propiedad, presence :true

            Largo minimo y maximo
                validates propiedad, length: {minimum:1, maximum:10}  

        Rutas
            Mapear todas las rutas asociadas a un ABM
                resources :tabla

        Form helpers
            Formulario para modelo
                <%= form_for @modelo do |m| %>
                <% end %>

            Label
                <%= m.label :propiedad %>
            
            Texto
                <%= m.text_field :propiedad %>

            Area de texto
                <%= m.text_area :propiedad %>

            Boton submit
                <%= m.submit %>

      